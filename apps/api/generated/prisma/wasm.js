
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  getPrismaClient,
  sqltag,
  empty,
  join,
  raw,
  skip,
  Decimal,
  Debug,
  objectEnumValues,
  makeStrictEnum,
  Extensions,
  warnOnce,
  defineDmmfProperty,
  Public,
  getRuntime,
  createParam,
} = require('./runtime/wasm-engine-edge.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.17.1
 * Query Engine version: 272a37d34178c2894197e17273bf937f25acdeac
 */
Prisma.prismaVersion = {
  client: "6.17.1",
  engine: "272a37d34178c2894197e17273bf937f25acdeac"
}

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError
Prisma.PrismaClientInitializationError = PrismaClientInitializationError
Prisma.PrismaClientValidationError = PrismaClientValidationError
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag
Prisma.empty = empty
Prisma.join = join
Prisma.raw = raw
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = Extensions.getExtensionContext
Prisma.defineExtension = Extensions.defineExtension

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}





/**
 * Enums
 */
exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  Serializable: 'Serializable'
});

exports.Prisma.COUNTERScalarFieldEnum = {
  CounterID: 'CounterID',
  CounterNumber: 'CounterNumber'
};

exports.Prisma.SERVICEScalarFieldEnum = {
  ServiceID: 'ServiceID',
  Name: 'Name',
  AvgServiceTime: 'AvgServiceTime'
};

exports.Prisma.COUNTER_SERVICEScalarFieldEnum = {
  CounterID: 'CounterID',
  ServiceID: 'ServiceID'
};

exports.Prisma.TICKETScalarFieldEnum = {
  TicketID: 'TicketID',
  TicketNumber: 'TicketNumber',
  StartTime: 'StartTime',
  EndTime: 'EndTime',
  Date: 'Date',
  ServiceID: 'ServiceID',
  CounterID: 'CounterID'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};


exports.Prisma.ModelName = {
  COUNTER: 'COUNTER',
  SERVICE: 'SERVICE',
  COUNTER_SERVICE: 'COUNTER_SERVICE',
  TICKET: 'TICKET'
};
/**
 * Create the Client
 */
const config = {
  "generator": {
    "name": "client",
    "provider": {
      "fromEnvVar": null,
      "value": "prisma-client-js"
    },
    "output": {
      "value": "C:\\Users\\ELEONORA\\Desktop\\se2\\Office-Queue\\apps\\api\\generated\\prisma",
      "fromEnvVar": null
    },
    "config": {
      "engineType": "library"
    },
    "binaryTargets": [
      {
        "fromEnvVar": null,
        "value": "windows",
        "native": true
      }
    ],
    "previewFeatures": [],
    "sourceFilePath": "C:\\Users\\ELEONORA\\Desktop\\se2\\Office-Queue\\apps\\api\\prisma\\schema.prisma",
    "isCustomOutput": true
  },
  "relativeEnvPaths": {
    "rootEnvPath": "../../.env",
    "schemaEnvPath": "../../.env"
  },
  "relativePath": "../../prisma",
  "clientVersion": "6.17.1",
  "engineVersion": "272a37d34178c2894197e17273bf937f25acdeac",
  "datasourceNames": [
    "db"
  ],
  "activeProvider": "sqlite",
  "inlineDatasources": {
    "db": {
      "url": {
        "fromEnvVar": "DATABASE_URL",
        "value": null
      }
    }
  },
  "inlineSchema": "// This is your Prisma schema file,\n// learn more about it in the docs: https://pris.ly/d/prisma-schema\n\n// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?\n// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init\n\ngenerator client {\n  provider = \"prisma-client-js\"\n  output   = \"../generated/prisma\"\n}\n\ndatasource db {\n  provider = \"sqlite\"\n  url      = env(\"DATABASE_URL\")\n}\n\nmodel COUNTER {\n  CounterID     Int @id @default(autoincrement())\n  CounterNumber Int @unique\n\n  // relazione inversa verso COUNTER_SERVICE\n  counterServices COUNTER_SERVICE[]\n\n  // relazione inversa verso TICKET\n  tickets TICKET[]\n}\n\nmodel SERVICE {\n  ServiceID      Int    @id @default(autoincrement())\n  Name           String\n  AvgServiceTime Int\n\n  // relazione inversa verso COUNTER_SERVICE\n  counterServices COUNTER_SERVICE[]\n\n  // relazione inversa verso TICKET\n  tickets TICKET[]\n}\n\nmodel COUNTER_SERVICE {\n  CounterID Int\n  ServiceID Int\n\n  counter COUNTER @relation(fields: [CounterID], references: [CounterID])\n  service SERVICE @relation(fields: [ServiceID], references: [ServiceID])\n\n  @@id([CounterID, ServiceID])\n}\n\nmodel TICKET {\n  TicketID     Int       @id @default(autoincrement())\n  TicketNumber String    @unique\n  StartTime    DateTime\n  EndTime      DateTime?\n  Date         DateTime\n  ServiceID    Int\n  service      SERVICE   @relation(fields: [ServiceID], references: [ServiceID])\n  CounterID    Int?\n  counter      COUNTER?  @relation(fields: [CounterID], references: [CounterID])\n}\n",
  "inlineSchemaHash": "b9e49d2174161dcfca45214ae0fa0e559ab5227b04c605449bc0af2c9603119c",
  "copyEngine": true
}
config.dirname = '/'

config.runtimeDataModel = JSON.parse("{\"models\":{\"COUNTER\":{\"fields\":[{\"name\":\"CounterID\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"CounterNumber\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"counterServices\",\"kind\":\"object\",\"type\":\"COUNTER_SERVICE\",\"relationName\":\"COUNTERToCOUNTER_SERVICE\"},{\"name\":\"tickets\",\"kind\":\"object\",\"type\":\"TICKET\",\"relationName\":\"COUNTERToTICKET\"}],\"dbName\":null},\"SERVICE\":{\"fields\":[{\"name\":\"ServiceID\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"Name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"AvgServiceTime\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"counterServices\",\"kind\":\"object\",\"type\":\"COUNTER_SERVICE\",\"relationName\":\"COUNTER_SERVICEToSERVICE\"},{\"name\":\"tickets\",\"kind\":\"object\",\"type\":\"TICKET\",\"relationName\":\"SERVICEToTICKET\"}],\"dbName\":null},\"COUNTER_SERVICE\":{\"fields\":[{\"name\":\"CounterID\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"ServiceID\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"counter\",\"kind\":\"object\",\"type\":\"COUNTER\",\"relationName\":\"COUNTERToCOUNTER_SERVICE\"},{\"name\":\"service\",\"kind\":\"object\",\"type\":\"SERVICE\",\"relationName\":\"COUNTER_SERVICEToSERVICE\"}],\"dbName\":null},\"TICKET\":{\"fields\":[{\"name\":\"TicketID\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"TicketNumber\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"StartTime\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"EndTime\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"Date\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"ServiceID\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"service\",\"kind\":\"object\",\"type\":\"SERVICE\",\"relationName\":\"SERVICEToTICKET\"},{\"name\":\"CounterID\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"counter\",\"kind\":\"object\",\"type\":\"COUNTER\",\"relationName\":\"COUNTERToTICKET\"}],\"dbName\":null}},\"enums\":{},\"types\":{}}")
defineDmmfProperty(exports.Prisma, config.runtimeDataModel)
config.engineWasm = {
  getRuntime: async () => require('./query_engine_bg.js'),
  getQueryEngineWasmModule: async () => {
    const loader = (await import('#wasm-engine-loader')).default
    const engine = (await loader).default
    return engine
  }
}
config.compilerWasm = undefined

config.injectableEdgeEnv = () => ({
  parsed: {
    DATABASE_URL: typeof globalThis !== 'undefined' && globalThis['DATABASE_URL'] || typeof process !== 'undefined' && process.env && process.env.DATABASE_URL || undefined
  }
})

if (typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined) {
  Debug.enable(typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined)
}

const PrismaClient = getPrismaClient(config)
exports.PrismaClient = PrismaClient
Object.assign(exports, Prisma)

